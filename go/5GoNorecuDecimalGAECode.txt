package hello

import (
    "fmt"
    "net/http"
	"time"
	"github.com/shopspring/decimal"
	"golang.org/x/net/context"
	"google.golang.org/appengine"
	"google.golang.org/appengine/datastore"
)

func Fibonacci(n int) float64 {  
	FiboResult := 0.0
	next_result := 1.1
	prev_result := 1.1
    if n == 1 || n == 2 {   
        FiboResult = 1.1
    }else{
		for i := 3; i <= n; i++ {
			FiboResult = prev_result + next_result; 
			prev_result = next_result;
			next_result = FiboResult;
		}
	} 	
    return FiboResult
}

func FiboTime(fiboIndex int) int64{
    startTime := time.Now()
    Fibonacci( fiboIndex )
    endTime := time.Now()
	var totalTime int64 = (endTime.Sub(startTime).Nanoseconds())/1000000
	return totalTime
}

type FiboData struct {
    FiboIndex          int
	TimeStamp          time.Time
	Results            int64
}

func dataStore(ctx context.Context, fiboIndex int,results int64) {
	fibodata := &FiboData{
		FiboIndex: fiboIndex,
		TimeStamp:  time.Now(),
		Results:  results,
	}

	key := datastore.NewIncompleteKey(ctx, "FiboData", nil)
	if _, err := datastore.Put(ctx, key, fibodata); err != nil {
		fmt.Println("datastore failed")
	}
}

func init() {
    http.HandleFunc("/", handler)
}

func handler(w http.ResponseWriter, r *http.Request) {
	ctx := appengine.NewContext(r)
	fiboIndex := 10000
	for flag := 1; flag <= 30; flag++ {
		totalTime := FiboTime(fiboIndex)
		dataStore(ctx, fiboIndex, totalTime)
		time.Sleep(20 * time.Second)
	}
    fmt.Fprint(w, "Hello, world!")
}
